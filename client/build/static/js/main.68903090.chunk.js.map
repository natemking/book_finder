{"version":3,"sources":["components/Jumbotron/index.js","components/Navbar/index.js","components/BookContainer/index.js","components/Button/index.js","components/Book/index.js","utils/API.js","pages/SavedPage.js","components/Searchbar/index.js","components/Modal/index.js","pages/SearchPage.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Jumbotron","className","Navbar","to","BookContainer","heading","children","Button","id","type","btnName","onClick","Book","title","authors","desc","img","link","writers","map","author","i","href","target","rel","src","alt","API","getBooks","axios","get","saveBook","bookData","post","deleteBook","delete","searchBooks","book","SavedPage","useState","books","setBooks","useEffect","loadBooks","a","response","data","console","log","handleOnClick","e","bookList","_id","description","image","length","Searchbar","onChange","onSubmit","required","ModalSave","show","handleClose","Modal","onHide","Header","Title","Body","Footer","variant","SearchPage","search","setSearch","searchResult","setSearchResult","savedBook","setSavedBook","setShow","choice","filter","volumeInfo","imageLinks","thumbnail","previewLink","handleShow","error","sendSaveBook","results","undefined","hasOwnProperty","value","preventDefault","toLowerCase","trim","items","searchForBook","querySelector","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.68903090.chunk.js","sourcesContent":["import React from 'react';\n\nconst Jumbotron = () => {\n    // Render main jumbo\n    return (\n        <section className='jumbotron container mt-md-5 text-center border border-dark'>\n            <h1 className='display-4'>\n                (React) Google Books Search\n            </h1>\n            <p className='lead'>\n                Search for and Save books of interest!\n            </p>\n        </section>\n    );\n}\n \nexport default Jumbotron;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    // Render Navbar\n    return ( \n        <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n\n            <span className='navbar-brand mb-0 h1'>\n                Google Books\n            </span>\n            <ul className='navbar-nav mr-auto d-flex flex-row w-100'>\n                <li className='nav-item'>\n                    <Link to='/search' className='nav-link mr-3 mr-md-0'>\n                        Search\n                    </Link>\n                </li>\n                <li className='nav-item'>\n                <Link to='/saved'  className='nav-link'>\n                        Saved\n                    </Link>\n                </li>\n            </ul>\n\n        </nav>\n    );\n}\n \nexport default Navbar;","import React from 'react';\n\n\nconst BookContainer = ({ heading, children }) => {\n   // Render book list container\n    return (\n        <section className='jumbotron container border border-dark'>\n            <p>{ heading }</p>\n            { children }\n        </section>\n    );\n}\n \nexport default BookContainer;","import React from 'react';\n\n\nconst Button = ({ id, type, btnName, onClick }) => {\n   // Render button\n    return ( \n        <button \n            id={ id } \n            type={ type }\n            onClick={ onClick } \n            className={ \n                // Assign class name per button type\n                btnName === 'View' ? 'btn btn-secondary mr-1' : \n                btnName === 'Search' ? 'btn btn-dark mt-3 float-right' :\n                'btn btn-dark'\n            }\n        >\n            { btnName }\n        </button>\n     );\n}\n \nexport default Button;","import React from 'react';\nimport Button from '../Button';\n\n\nconst Book = ({ id, title, authors, desc, img, link, type, btnName, onClick }) => {\n    // If more than one author, split and add comma between\n    const writers = authors.map((author, i) => (i ? ', ' : '') + author)\n    \n    //Render book\n    return (\n        <article className='container bg-white border border-dark pb-3'>\n\n            {/* Row w/ title, author and action btns */}\n            <section className='row justify-content-between'>\n                <section className='col-md-3 mt-3'>\n                    <h4>{ title }</h4>\n                    <p>{ writers }</p>  \n                </section>\n                <section className='col-md-3 mt-3 d-flex justify-content-end mb-3'>\n                    <section>\n                        <a href={ link } target='_blank' rel='noreferrer'>\n                            <Button \n                                type={ type } \n                                btnName='View' \n                            />\n                        </a>\n                    </section>\n                    <section>\n                        <Button \n                            id={ id } \n                            type={ type } \n                            btnName={ btnName } \n                            onClick={ onClick } \n                        />\n                    </section>\n                </section>\n            </section>\n\n            {/* Row w/ book cover and description */}\n            <section className='row'>\n                <section className='col-md-3 col-lg-2 my-2'>\n                    <img src={ img } alt={ `${title} cover` } />\n                </section>\n                <section className='col-md-9 col-lg-10 text-justify'>\n                    <p>\n                        { desc }\n                    </p>\n                </section>\n            </section>\n\n        </article>\n    );\n}\n \nexport default Book;","import axios from 'axios';\n\nconst API = {\n    // DB api CRUD calls\n    getBooks() {\n        return axios.get('/api/books')\n    },\n    saveBook(bookData) {\n        return axios.post('/api/books', bookData)\n    },\n    deleteBook(id) {\n        return axios.delete(`/api/books/${id}`)\n    },\n    // POST call for Google Books API\n    searchBooks(book) {\n        return axios.post(`/api/search/${book}`)\n    }\n}\n\nexport default API;","import React, { useState, useEffect } from 'react';\nimport BookContainer from '../components/BookContainer';\nimport Book from '../components/Book';\nimport API from '../utils/API';\n\n\nconst SavedPage = () => {\n    // State for books in DB\n    const [books, setBooks] = useState([]);\n\n    // Load saved books from DB\n    useEffect(() => {\n        loadBooks()\n    }, []);\n\n    // Get books from DB and set state\n    const loadBooks = async () => {\n        try {\n            const response = await API.getBooks();\n            setBooks(response.data);\n        } catch (err) { console.log(err) }\n    }\n\n    // When delete btn is clicked, remove from DB and reload books\n    const handleOnClick = (e) => {\n        const { id } = e.target;\n        API.deleteBook(id);\n        loadBooks();\n    }\n\n    // Map over books from DB and render each to Book component\n    const bookList = books.map(book => \n        <Book \n            key={book._id}\n            id={book._id}\n            title={book.title}\n            authors={book.authors}\n            desc={book.description}\n            img={book.image}\n            link={book.link}\n            type='button'\n            btnName='Delete'\n            onClick={ handleOnClick }\n        />\n    )\n    \n    // Render the BookContainer with the list of saved books from the DB\n    return ( \n        <BookContainer heading={ books.length === 0 ? 'No saved books yet' : 'Saved' }>\n            { bookList }\n        </BookContainer>\n    );\n}\n \nexport default SavedPage;","import React from 'react';\nimport Button from '../Button';\n\nconst Searchbar = ({ id, type, btnName, onChange, onSubmit }) => {\n    // Render search bar\n    return (\n        <section className='jumbotron container mt-5 border border-dark'>\n\n            <h3>Book Search</h3>\n\n           <form id={ id } className='form-group' onSubmit={ onSubmit }>\n                <label>Book</label>\n                <input className='form-control' type='text' onChange={ onChange } required/>\n    \n                <Button \n                    type={ type } \n                    btnName={ btnName } \n                    className='btn btn-dark mt-3 float-right'\n                />\n           </form>\n\n        </section>\n    );\n}\n \nexport default Searchbar;","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst ModalSave = ({ show, handleClose, book }) => {\n    // Render modal when book is saved\n    return ( \n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header>\n                <Modal.Title>\n                    Success!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <i><strong>{ book }</strong></i> has been added to your Library!\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant='secondary' onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n \nexport default ModalSave;","import React, { useState } from 'react';\nimport API from '../utils/API';\nimport Searchbar from '../components/Searchbar';\nimport BookContainer from '../components/BookContainer';\nimport Book from '../components/Book';\nimport ModalSave from '../components/Modal';\n\nconst SearchPage = () => {\n    // State for the book that is being searched\n    const [search, setSearch] = useState('');\n    // State for the results of the book searched\n    const [searchResult, setSearchResult] = useState([]);\n    // State for the book to be saved to DB\n    const [savedBook, setSavedBook] = useState('');\n    // State to show a modal post save\n    const [show, setShow] = useState(false);\n\n    // Set search state as the user types input\n    const handleOnChange = (e) => {\n        const { value } = e.target\n        setSearch(value)\n    }\n\n    // On search btn submit, send the searched for book to the server and set the search results state on response\n    const handleBtnSubmit = (e) => {\n        e.preventDefault();\n       \n        const searchForBook = async () =>{\n            try {\n            const results = await API.searchBooks(search.toLowerCase().trim());\n            setSearchResult(results.data.items);\n            } catch (err) {console.error(err);}\n        }    \n        searchForBook();\n        e.target.querySelector('input').value = '';\n    }\n\n    // On save button click, send book to the server/DB, set saved book state, & display confirmation modal\n    const handleOnClick = (e) => {\n        const { id } = e.target;\n        \n        const choice = searchResult.filter(book => ( book.id === id))\n        \n        const sendSaveBook = async () => {\n            try {\n                await API.saveBook({\n                    title: choice[0].volumeInfo.title,\n                    authors: choice[0].volumeInfo.authors,\n                    description: choice[0].volumeInfo.description,\n                    image: choice[0].volumeInfo.imageLinks.thumbnail,\n                    link: choice[0].volumeInfo.previewLink\n                });\n                setSavedBook(choice[0].volumeInfo.title);\n                handleShow();\n            } catch (err) { console.error(err) }\n        }\n        sendSaveBook();\n    }\n\n    // Functions for showing and closing the modal\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    // Validate for results from search then filter out only the results that have all of the info needed and then map each to a book component\n    const results = searchResult === undefined ? <h3>No results. Please try again.</h3> :\n        searchResult.filter(book => (\n        book.volumeInfo.hasOwnProperty('title') &&\n        book.volumeInfo.hasOwnProperty('authors') &&\n        book.volumeInfo.hasOwnProperty('description') &&\n        book.volumeInfo.hasOwnProperty('imageLinks') &&\n        book.volumeInfo.hasOwnProperty('previewLink')\n        ))\n        .map(book =>\n        <Book\n            key={book.id}\n            id={book.id}\n            title={book.volumeInfo.title}\n            authors={book.volumeInfo.authors}\n            desc={book.volumeInfo.description}\n            img={book.volumeInfo.imageLinks.thumbnail}\n            link={book.volumeInfo.previewLink}\n            type='button'\n            btnName='Save'\n            onClick={handleOnClick}\n        />\n    )\n    \n    // Render the search bar and search results\n    return (\n       <>\n            <Searchbar\n                type='submit'\n                btnName='Search'\n                onChange={handleOnChange}\n                onSubmit={handleBtnSubmit}\n            />\n    \n            {results.length === 0 ? null :\n             <BookContainer heading={ searchResult === undefined ? '': 'Results' }>\n                { results }\n            </BookContainer>}\n            <ModalSave show={ show } handleClose={ handleClose } book={ savedBook }/>\n       </>\n    );\n}\n \nexport default SearchPage;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport SavedPage from './pages/SavedPage';\nimport SearchPage from './pages/SearchPage';\n\nfunction App() {\n  // Render App and route \n  return (\n   <Router>\n      <Navbar />\n      <main>\n        <Jumbotron />\n        <Switch>\n          <Route exact path={ [ '/', '/search' ] }component={SearchPage} />\n          <Route exact path='/saved' component={ SavedPage } />\n          <Route component={SearchPage} />\n        </Switch>\n      </main>\n   </Router>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n"],"sourceRoot":""}